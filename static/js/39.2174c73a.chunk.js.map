{"version":3,"sources":["components/TimeseriesBrush.js"],"names":["margin","TimeseriesBrush","timeseries","dates","brushDomain","endDate","setBrushEnd","setLookback","chartRef","useRef","useMeasure","wrapperRef","width","height","xScale","useMemo","T","length","chartRight","scaleTime","clamp","domain","parseIndiaDate","range","useEffect","chartBottom","timeseriesStacked","stack","keys","BRUSH_STATISTICS","value","date","statistic","Math","max","getStatistic","yScale","scaleLinear","svg","select","current","t","transition","duration","D3_TRANSITION_DURATION","attr","style","call","g","axisBottom","ticks","numTicksX","areaPath","area","curve","curveMonotoneX","x","d","data","y0","y1","selectAll","join","enter","append","key","STATISTIC_CONFIGS","color","update","attrTween","previous","this","interpolatePath","selection","defaultSelection","map","brushed","useCallback","sourceEvent","invert","brushStartDate","brushEndDate","ReactDOM","unstable_batchedUpdates","formatISO","representation","differenceInDays","brush","brushX","extent","on","move","datum","type","beforebrushstarted","event","brushSelection","parentNode","dx","pointers","cx","x0","x1","X0","X1","className","classnames","ref","preserveAspectRatio","isEqual","prevProps","currProps","equal","regionHighlighted","stateCode","districtName","memo"],"mappings":"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","file":"static/js/39.2174c73a.chunk.js","sourcesContent":["import {\n  BRUSH_STATISTICS,\n  D3_TRANSITION_DURATION,\n  STATISTIC_CONFIGS,\n} from '../constants';\nimport {getStatistic, parseIndiaDate} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport {max} from 'd3-array';\nimport {axisBottom} from 'd3-axis';\nimport {brushX, brushSelection} from 'd3-brush';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {scaleTime, scaleLinear} from 'd3-scale';\nimport {select, pointers} from 'd3-selection';\nimport {area, curveMonotoneX, stack} from 'd3-shape';\nimport 'd3-transition';\nimport {differenceInDays, formatISO} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport {memo, useCallback, useMemo, useEffect, useRef} from 'react';\nimport ReactDOM from 'react-dom';\nimport {useMeasure} from 'react-use';\n\n// Chart margins\nconst margin = {top: 0, right: 35, bottom: 20, left: 25};\nconst yBufferTop = 1.2;\nconst numTicksX = (width) => (width < 480 ? 4 : 6);\n\nfunction TimeseriesBrush({\n  timeseries,\n  dates,\n  brushDomain,\n  endDate,\n  setBrushEnd,\n  setLookback,\n}) {\n  const chartRef = useRef();\n  const [wrapperRef, {width, height}] = useMeasure();\n\n  const xScale = useMemo(() => {\n    const T = dates.length;\n\n    // Chart extremes\n    const chartRight = width - margin.right;\n\n    return scaleTime()\n      .clamp(true)\n      .domain([\n        parseIndiaDate(dates[0] || endDate),\n        parseIndiaDate(dates[T - 1] || endDate),\n      ])\n      .range([margin.left, chartRight]);\n  }, [width, endDate, dates]);\n\n  useEffect(() => {\n    if (!width || !height) return;\n\n    // Chart extremes\n    const chartBottom = height - margin.bottom;\n\n    const xAxis = (g) =>\n      g\n        .attr('class', 'x-axis')\n        .call(axisBottom(xScale).ticks(numTicksX(width)));\n\n    const timeseriesStacked = stack()\n      .keys(BRUSH_STATISTICS)\n      .value((date, statistic) =>\n        Math.max(0, getStatistic(timeseries[date], 'total', statistic))\n      )(dates);\n\n    const yScale = scaleLinear()\n      .clamp(true)\n      .domain([\n        0,\n        max(\n          timeseriesStacked[timeseriesStacked.length - 1],\n          ([, y1]) => yBufferTop * y1\n        ),\n      ])\n      .range([chartBottom, margin.top]);\n\n    const svg = select(chartRef.current);\n    const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n    svg\n      .select('.x-axis')\n      .attr('pointer-events', 'none')\n      .style('transform', `translateY(${chartBottom}px)`)\n      .transition(t)\n      .call(xAxis);\n\n    const areaPath = area()\n      .curve(curveMonotoneX)\n      .x((d) => xScale(parseIndiaDate(d.data)))\n      .y0((d) => yScale(d[0]))\n      .y1((d) => yScale(d[1]));\n\n    svg\n      .selectAll('.trend-area')\n      .data(timeseriesStacked)\n      .join(\n        (enter) =>\n          enter\n            .append('path')\n            .attr('class', 'trend-area')\n            .attr('fill', ({key}) => STATISTIC_CONFIGS[key].color + '99')\n            .attr('stroke', 'none')\n            .attr('d', areaPath)\n            .attr('pointer-events', 'none'),\n        (update) =>\n          update\n            .transition(t)\n            .attrTween('d', function (date) {\n              const previous = select(this).attr('d');\n              const current = areaPath(date);\n              return interpolatePath(previous, current);\n            })\n            .selection()\n      );\n  }, [dates, width, height, xScale, timeseries]);\n\n  const defaultSelection = brushDomain.map((date) =>\n    xScale(parseIndiaDate(date))\n  );\n\n  const brushed = useCallback(\n    ({sourceEvent, selection}) => {\n      if (!sourceEvent) return;\n      // if (!selection) {\n      //   const [[cx]] = pointers(event);\n      //   selection = [cx, cx];\n      //   select(this).call(brush.move, [cx, cx]);\n      // }\n      const [brushStartDate, brushEndDate] = selection.map(xScale.invert);\n\n      ReactDOM.unstable_batchedUpdates(() => {\n        setBrushEnd(formatISO(brushEndDate, {representation: 'date'}));\n        setLookback(differenceInDays(brushEndDate, brushStartDate));\n      });\n    },\n    [xScale, setBrushEnd, setLookback]\n  );\n\n  useEffect(() => {\n    if (!width || !height) return;\n\n    const svg = select(chartRef.current);\n    // Chart extremes\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n\n    function beforebrushstarted(event) {\n      const selection = brushSelection(this.parentNode);\n      if (!selection) return;\n\n      const dx = selection[1] - selection[0];\n      const [[cx]] = pointers(event);\n      const [x0, x1] = [cx - dx / 2, cx + dx / 2];\n      const [X0, X1] = xScale.range();\n      select(this.parentNode).call(\n        brush.move,\n        x1 > X1 ? [X1 - dx, X1] : x0 < X0 ? [X0, X0 + dx] : [x0, x1]\n      );\n    }\n\n    function brushended({sourceEvent, selection}) {\n      if (!sourceEvent || !selection) return;\n      const domain = selection\n        .map(xScale.invert)\n        .map((date) => formatISO(date, {representation: 'date'}));\n\n      select(this)\n        .call(\n          brush.move,\n          domain.map((date) => xScale(parseIndiaDate(date)))\n        )\n        .call((g) => g.select('.overlay').attr('cursor', 'pointer'));\n    }\n\n    const brush = brushX()\n      .extent([\n        [margin.left, margin.top],\n        [chartRight, chartBottom],\n      ])\n      .on('start brush', brushed)\n      .on('end', brushended);\n\n    svg\n      .select('.brush')\n      .call(brush)\n      .call(brush.move, defaultSelection)\n      .call((g) =>\n        g\n          .select('.overlay')\n          .attr('cursor', 'pointer')\n          .datum({type: 'selection'})\n          .on('mousedown touchstart', beforebrushstarted)\n      );\n  }, [width, height, xScale, defaultSelection, brushed]);\n\n  return (\n    <div className=\"Timeseries\">\n      <div\n        className={classnames('svg-parent fadeInUp is-brush')}\n        ref={wrapperRef}\n      >\n        <svg ref={chartRef} preserveAspectRatio=\"xMidYMid meet\">\n          <g className=\"brush\" />\n          <g className=\"x-axis\" />\n        </svg>\n      </div>\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.brushDomain, prevProps.brushDomain)) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.stateCode,\n      prevProps.regionHighlighted.stateCode\n    )\n  ) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.districtName,\n      prevProps.regionHighlighted.districtName\n    )\n  ) {\n    return false;\n  } else if (!equal(currProps.endDate, prevProps.endDate)) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(TimeseriesBrush, isEqual);\n"],"sourceRoot":""}