{"version":3,"sources":["components/Tooltip.js","components/StateMetaCard.js","../node_modules/react-feather/dist/icons/compass.js","components/StateMeta.js"],"names":["Tooltip","children","message","handleClick","useCallback","e","stopPropagation","className","content","dangerouslySetInnerHTML","__html","split","map","text","join","arrow","animation","onClick","bind","this","StateMetaCard","title","statistic","total","formula","date","description","t","useTranslation","size","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Compass","forwardRef","_ref","ref","_ref$color","color","_ref$size","rest","React","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","cx","cy","r","points","propTypes","PropTypes","string","oneOfType","number","displayName","Fraction","numerator","denominator","StateMeta","stateCode","data","timeseries","confirmedPerLakh","getStatistic","normalizedByPopulationPer","testPerLakh","totalConfirmedPerLakh","activePercent","recoveryPercent","deathPercent","pastDates","filter","getIndiaDateYesterdayISO","lastDate","prevWeekDate","formatISO","subDays","parseIndiaDate","tprWeek","movingAverage","formatNumber","meta","population","href","STATE_NAMES","formatDate","formatLastUpdated","tested","isEqual","prevProps","currProps","memo"],"mappings":"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","file":"static/js/36.21973f7e.chunk.js","sourcesContent":["import Tippy from '@tippyjs/react';\nimport {useCallback} from 'react';\n\nimport 'tippy.js/dist/tippy.css';\nimport 'tippy.js/animations/shift-away.css';\n\nfunction Tooltip({children, message}) {\n  const handleClick = useCallback((e) => e.stopPropagation(), []);\n\n  return (\n    <Tippy\n      className=\"Tooltip\"\n      content={\n        typeof message === 'string' ? (\n          <p\n            className=\"message\"\n            dangerouslySetInnerHTML={{\n              __html: message\n                .split('\\n')\n                .map((text) => `<div>${text}</div>`)\n                .join(''),\n            }}\n          ></p>\n        ) : (\n          message\n        )\n      }\n      arrow={false}\n      animation=\"shift-away\"\n    >\n      <div onClick={handleClick.bind(this)}>{children}</div>\n    </Tippy>\n  );\n}\n\nexport default Tooltip;\n","import Tooltip from './Tooltip';\n\nimport {InfoIcon} from '@primer/octicons-react';\nimport {useTranslation} from 'react-i18next';\n\nfunction StateMetaCard({\n  title,\n  statistic,\n  total,\n  formula,\n  date,\n  description,\n  className,\n}) {\n  const {t} = useTranslation();\n\n  return (\n    <div className={`meta-item ${className}`}>\n      <div className=\"meta-item-top\">\n        <h3>{title}</h3>\n        <Tooltip message={formula}>\n          <InfoIcon size={16} />\n        </Tooltip>\n      </div>\n      <h1>{statistic}</h1>\n      <h5>{date}</h5>\n      {total && <h5>{`${t('India has')} ${total} ${t('CPM')}`}</h5>}\n      <p>{description}</p>\n    </div>\n  );\n}\n\nexport default StateMetaCard;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Compass = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"circle\", {\n    cx: \"12\",\n    cy: \"12\",\n    r: \"10\"\n  }), /*#__PURE__*/React.createElement(\"polygon\", {\n    points: \"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76\"\n  }));\n});\nCompass.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nCompass.displayName = 'Compass';\nexport default Compass;","import StateMetaCard from './StateMetaCard';\n\nimport {STATE_NAMES} from '../constants';\nimport {\n  formatDate,\n  formatNumber,\n  formatLastUpdated,\n  getStatistic,\n  getIndiaDateYesterdayISO,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport {formatISO, subDays} from 'date-fns';\nimport {memo} from 'react';\nimport {Compass} from 'react-feather';\nimport {useTranslation} from 'react-i18next';\n\nfunction Fraction({numerator, denominator}) {\n  return (\n    <div className=\"frac\">\n      <span>{numerator}</span>\n      <span className=\"bottom\">{denominator}</span>\n    </div>\n  );\n}\n\nfunction StateMeta({stateCode, data, timeseries}) {\n  const {t} = useTranslation();\n\n  const confirmedPerLakh = getStatistic(data[stateCode], 'total', 'confirmed', {\n    normalizedByPopulationPer: 'lakh',\n  });\n  const testPerLakh = getStatistic(data[stateCode], 'total', 'tested', {\n    normalizedByPopulationPer: 'lakh',\n  });\n  const totalConfirmedPerLakh = getStatistic(data['TT'], 'total', 'confirmed', {\n    normalizedByPopulationPer: 'lakh',\n  });\n\n  const activePercent = getStatistic(data[stateCode], 'total', 'activeRatio');\n  const recoveryPercent = getStatistic(\n    data[stateCode],\n    'total',\n    'recoveryRatio'\n  );\n  const deathPercent = getStatistic(data[stateCode], 'total', 'cfr');\n\n  // Show TPR for week preceeding last updated date\n  const pastDates = Object.keys(timeseries || {}).filter(\n    (date) => date <= getIndiaDateYesterdayISO()\n  );\n  const lastDate = pastDates[pastDates.length - 1];\n  const prevWeekDate = formatISO(subDays(parseIndiaDate(lastDate), 6));\n\n  const tprWeek = getStatistic(timeseries?.[lastDate], 'delta', 'tpr', {\n    movingAverage: true,\n  });\n\n  return (\n    <>\n      <div className=\"StateMeta population\">\n        <div className=\"meta-item population\">\n          <h3>{t('Population')}</h3>\n          <h1>{formatNumber(data[stateCode]?.meta?.population)}</h1>\n        </div>\n        <div className=\"alert\">\n          <Compass />\n          <div className=\"alert-right\">\n            {t('Based on 2019 population projection by NCP')}\n            <a\n              href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n              target=\"_noblank\"\n            >\n              report\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"StateMeta\">\n        <StateMetaCard\n          className=\"confirmed\"\n          title={'Confirmed Per Lakh'}\n          statistic={formatNumber(confirmedPerLakh)}\n          total={formatNumber(totalConfirmedPerLakh)}\n          formula={\n            <>\n              {`${1e5} x `}\n              <Fraction\n                numerator={`Total confirmed cases`}\n                denominator={`Total population`}\n              />\n            </>\n          }\n          description={`\n            ~${formatNumber(confirmedPerLakh, 'long')} ${t(\n            'out of every lakh people in'\n          )} ${STATE_NAMES[stateCode]} ${t(\n            'have tested positive for the virus.'\n          )}\n            `}\n        />\n\n        <StateMetaCard\n          className=\"active\"\n          title={'Active Ratio'}\n          statistic={`${formatNumber(activePercent, '%')}`}\n          formula={\n            <>\n              {'100 x '}\n              <Fraction\n                numerator={'Total active cases right now'}\n                denominator={'Total confirmed cases'}\n              />\n            </>\n          }\n          description={\n            activePercent > 0\n              ? `${t('For every 100 confirmed cases')}, ~${formatNumber(\n                  activePercent,\n                  'long'\n                )} ${t('are currently infected.')}`\n              : t('Currently, there are no active cases in this state.')\n          }\n        />\n\n        <StateMetaCard\n          className=\"recovery\"\n          title={'Recovery Ratio'}\n          statistic={`${formatNumber(recoveryPercent, '%')}`}\n          formula={\n            <>\n              {'100 x '}\n              <Fraction\n                numerator={'Total recovered cases'}\n                denominator={'Total confirmed cases'}\n              />\n            </>\n          }\n          description={\n            recoveryPercent > 0\n              ? `${t('For every 100 confirmed cases')}, ~${formatNumber(\n                  recoveryPercent,\n                  'long'\n                )} ${t('have recovered from the virus.')}`\n              : t('Unfortunately, there are no recoveries in this state yet.')\n          }\n        />\n\n        <StateMetaCard\n          className=\"mortality\"\n          title={'Case Fatality Ratio'}\n          statistic={`${formatNumber(deathPercent, '%')}`}\n          formula={\n            <>\n              {'100 x '}\n              <Fraction\n                numerator={'Total deaths'}\n                denominator={'Total confirmed cases'}\n              />\n            </>\n          }\n          description={\n            deathPercent > 0\n              ? `${t('For every 100 confirmed cases')}, ~${formatNumber(\n                  deathPercent,\n                  'long'\n                )} ${t('have unfortunately passed away from the virus.')}`\n              : t(\n                  'Fortunately, no one has passed away from the virus in this state.'\n                )\n          }\n        />\n\n        <StateMetaCard\n          className=\"tpr\"\n          title={'Test Positivity Ratio'}\n          statistic={tprWeek > 0 ? `${formatNumber(tprWeek, '%')}` : '-'}\n          formula={\n            <>\n              {'100 x '}\n              <Fraction\n                numerator={'Confirmed cases last week'}\n                denominator={'Samples tested last week'}\n              />\n            </>\n          }\n          date={`${formatDate(prevWeekDate, 'dd MMM')} - ${formatDate(\n            lastDate,\n            'dd MMM'\n          )}`}\n          description={\n            tprWeek > 0\n              ? `${t('In the last one week,')} ${formatNumber(tprWeek, '%')}\n              ${t('of samples tested came back positive.')}`\n              : t('No tested sample came back positive in last one week.')\n          }\n        />\n\n        <StateMetaCard\n          className=\"tpm\"\n          title={'Tests Per Lakh'}\n          statistic={`${formatNumber(testPerLakh)}`}\n          formula={\n            <>\n              {`${1e5} x `}\n              <Fraction\n                numerator={`Total samples tested`}\n                denominator={`Total population`}\n              />\n            </>\n          }\n          date={\n            testPerLakh\n              ? `${t('As of')} ${formatLastUpdated(\n                  data[stateCode]?.meta?.tested?.['last_updated']\n                )} ${t('ago')}`\n              : ''\n          }\n          description={\n            testPerLakh > 0\n              ? `${t('For every lakh people in')} ${STATE_NAMES[stateCode]},\n                ~${formatNumber(testPerLakh, 'long')} ${t(\n                  'samples were tested.'\n                )}`\n              : t('No tests have been conducted in this state yet.')\n          }\n        />\n      </div>\n    </>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (prevProps.stateCode !== currProps.stateCode) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(StateMeta, isEqual);\n"],"sourceRoot":""}