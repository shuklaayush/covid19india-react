{"version":3,"sources":["components/Cell.js","components/DistrictRow.js","components/Row.js"],"names":["Cell","statistic","data","getTableStatistic","lastUpdatedDate","total","delta","spring","useSpring","config","SPRING_CONFIG_NUMBERS","statisticConfig","STATISTIC_CONFIGS","className","showDelta","div","classnames","title","to","formatNumber","format","Math","abs","isCellEqual","prevProps","currProps","equal","memo","DistrictRow","stateCode","districtName","tableStatistics","regionHighlighted","setRegionHighlighted","expandTable","t","useTranslation","highlightDistrict","useCallback","produce","draftRegionHighlighted","onMouseEnter","meta","notes","Tooltip","message","size","map","isDistrictRowEqual","Row","useState","showDistricts","setShowDistricts","useSessionStorage","sortColumn","isAscending","sortData","setSortData","history","useHistory","rowElement","useRef","handleSortClick","draftSortData","sortingFunction","districtNameA","districtNameB","dataType","statisticA","districts","statisticB","localeCompare","highlightState","_setShowDistrict","districtNameStr","UNKNOWN_DISTRICT_KEY","STATE_NAMES","handleStatePageClick","push","handleCollapse","current","scrollIntoView","block","onClick","ref","capitalize","formatLastUpdated","last_updated","bind","this","state","HeaderCell","handleSort","Object","keys","sort","a","b","isEqual"],"mappings":"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","file":"static/js/44.230d9a41.chunk.js","sourcesContent":["import {SPRING_CONFIG_NUMBERS, STATISTIC_CONFIGS} from '../constants.js';\nimport {formatNumber} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport {memo} from 'react';\nimport {animated, useSpring} from 'react-spring';\n\nconst Cell = ({statistic, data, lastUpdatedDate, getTableStatistic}) => {\n  const total = getTableStatistic(data, statistic, 'total');\n  const delta = getTableStatistic(data, statistic, 'delta');\n\n  const spring = useSpring({\n    total: total,\n    delta: delta,\n    config: SPRING_CONFIG_NUMBERS,\n  });\n\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\n\n  return (\n    <div className=\"cell statistic\">\n      {statisticConfig?.showDelta && (\n        <animated.div\n          className={classnames('delta', `is-${statistic}`)}\n          title={delta}\n        >\n          {spring.delta.to((delta) =>\n            delta > 0\n              ? '\\u2191' + formatNumber(delta, statisticConfig.format)\n              : delta < 0\n              ? '\\u2193' + formatNumber(Math.abs(delta), statisticConfig.format)\n              : ''\n          )}\n        </animated.div>\n      )}\n\n      <animated.div className=\"total\" title={total}>\n        {spring.total.to((total) =>\n          formatNumber(total, statisticConfig.format, statistic)\n        )}\n      </animated.div>\n    </div>\n  );\n};\n\nconst isCellEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (!equal(prevProps.getTableStatistic, currProps.getTableStatistic)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(Cell, isCellEqual);\n","import Cell from './Cell';\nimport Tooltip from './Tooltip';\n\nimport {InfoIcon} from '@primer/octicons-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport {memo, useCallback} from 'react';\nimport {useTranslation} from 'react-i18next';\n\nfunction DistrictRow({\n  stateCode,\n  districtName,\n  data,\n  tableStatistics,\n  regionHighlighted,\n  setRegionHighlighted,\n  expandTable,\n  getTableStatistic,\n}) {\n  const {t} = useTranslation();\n\n  const highlightDistrict = useCallback(() => {\n    if (regionHighlighted.districtName !== districtName) {\n      setRegionHighlighted(\n        produce(regionHighlighted, (draftRegionHighlighted) => {\n          draftRegionHighlighted.stateCode = stateCode;\n          draftRegionHighlighted.districtName = districtName;\n        })\n      );\n    }\n  }, [regionHighlighted, districtName, setRegionHighlighted, stateCode]);\n\n  return (\n    <div\n      className={classnames('row', 'district', {\n        'is-highlighted': regionHighlighted?.districtName === districtName,\n      })}\n      onMouseEnter={highlightDistrict}\n    >\n      <div className=\"cell\">\n        <div className=\"state-name\">{t(districtName)}</div>\n        {data?.meta?.notes && (\n          <Tooltip message={data.meta.notes}>\n            <InfoIcon size={16} />\n          </Tooltip>\n        )}\n      </div>\n\n      {tableStatistics.map((statistic) => (\n        <Cell\n          key={statistic}\n          {...{\n            statistic,\n            data,\n            getTableStatistic,\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n\nconst isDistrictRowEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (\n    !equal(prevProps.data?.['last_updated'], currProps.data?.['last_updated'])\n  ) {\n    return false;\n  } else if (\n    !equal(\n      prevProps.regionHighlighted.districtName,\n      currProps.regionHighlighted.districtName\n    ) &&\n    (equal(prevProps.regionHighlighted.districtName, prevProps.districtName) ||\n      equal(currProps.regionHighlighted.districtName, currProps.districtName))\n  ) {\n    return false;\n  } else if (!equal(prevProps.expandTable, currProps.expandTable)) {\n    return false;\n  } else if (!equal(prevProps.getTableStatistic, currProps.getTableStatistic)) {\n    return false;\n  } else if (!equal(prevProps.tableStatistics, currProps.tableStatistics)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(DistrictRow, isDistrictRowEqual);\n","import Cell from './Cell';\nimport DistrictRow from './DistrictRow';\nimport HeaderCell from './HeaderCell';\nimport Tooltip from './Tooltip';\n\nimport {\n  STATE_NAMES,\n  STATISTIC_CONFIGS,\n  UNKNOWN_DISTRICT_KEY,\n} from '../constants';\nimport {capitalize, formatLastUpdated} from '../utils/commonFunctions';\n\nimport {\n  AlertIcon,\n  ClockIcon,\n  SortAscIcon,\n  SortDescIcon,\n  FoldUpIcon,\n  GraphIcon,\n  InfoIcon,\n} from '@primer/octicons-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport {memo, useState, useCallback, useRef} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport {useSessionStorage} from 'react-use';\n\nfunction Row({\n  data,\n  tableStatistics,\n  stateCode,\n  districtName,\n  regionHighlighted,\n  setRegionHighlighted,\n  expandTable,\n  getTableStatistic,\n}) {\n  const [showDistricts, setShowDistricts] = useState(false);\n  const [sortData, setSortData] = useSessionStorage('districtSortData', {\n    sortColumn: 'confirmed',\n    isAscending: false,\n    delta: false,\n  });\n\n  const history = useHistory();\n  const {t} = useTranslation();\n\n  const rowElement = useRef();\n\n  const handleSortClick = useCallback(\n    (statistic) => {\n      if (sortData.sortColumn !== statistic) {\n        setSortData(\n          produce(sortData, (draftSortData) => {\n            if (\n              sortData.sortColumn === 'districtName' ||\n              statistic === 'districtName'\n            ) {\n              draftSortData.isAscending = !sortData.isAscending;\n            }\n            draftSortData.sortColumn = statistic;\n          })\n        );\n      } else {\n        setSortData(\n          produce(sortData, (draftSortData) => {\n            draftSortData.isAscending = !sortData.isAscending;\n          })\n        );\n      }\n    },\n    [sortData, setSortData]\n  );\n\n  const sortingFunction = useCallback(\n    (districtNameA, districtNameB) => {\n      if (sortData.sortColumn !== 'districtName') {\n        const statisticConfig = STATISTIC_CONFIGS[sortData.sortColumn];\n        const dataType =\n          sortData.delta && statisticConfig?.showDelta ? 'delta' : 'total';\n\n        const statisticA = getTableStatistic(\n          data.districts[districtNameA],\n          sortData.sortColumn,\n          dataType\n        );\n        const statisticB = getTableStatistic(\n          data.districts[districtNameB],\n          sortData.sortColumn,\n          dataType\n        );\n        return sortData.isAscending\n          ? statisticA - statisticB\n          : statisticB - statisticA;\n      } else {\n        return sortData.isAscending\n          ? districtNameA.localeCompare(districtNameB)\n          : districtNameB.localeCompare(districtNameA);\n      }\n    },\n    [sortData, data, getTableStatistic]\n  );\n\n  const highlightState = useCallback(() => {\n    if (stateCode) {\n      if (regionHighlighted.stateCode !== stateCode) {\n        setRegionHighlighted(\n          produce(regionHighlighted, (draftRegionHighlighted) => {\n            draftRegionHighlighted.stateCode = stateCode;\n            draftRegionHighlighted.districtName = null;\n          })\n        );\n      }\n    } else if (districtName) {\n      if (\n        regionHighlighted.districtName !== districtName ||\n        regionHighlighted.stateCode !== data.stateCode\n      ) {\n        setRegionHighlighted(\n          produce(regionHighlighted, (draftRegionHighlighted) => {\n            draftRegionHighlighted.stateCode = data.stateCode;\n            draftRegionHighlighted.districtName = districtName;\n          })\n        );\n      }\n    }\n  }, [\n    data.stateCode,\n    districtName,\n    regionHighlighted,\n    setRegionHighlighted,\n    stateCode,\n  ]);\n\n  const _setShowDistrict = useCallback(() => {\n    if (data.districts) {\n      setShowDistricts(!showDistricts);\n    }\n  }, [showDistricts, data]);\n\n  let districtNameStr = t(districtName);\n  if (districtName === UNKNOWN_DISTRICT_KEY) {\n    districtNameStr = `${t(UNKNOWN_DISTRICT_KEY)} [${t(\n      STATE_NAMES[data.stateCode]\n    )}]`;\n  }\n\n  const handleStatePageClick = useCallback(\n    (stateCode) => {\n      history.push(`state/${stateCode}`);\n    },\n    [history]\n  );\n\n  const handleCollapse = useCallback(() => {\n    setShowDistricts(false);\n    rowElement.current.scrollIntoView({\n      block: 'start',\n    });\n  }, []);\n\n  return (\n    <>\n      <div\n        className={classnames(\n          'row',\n          {'is-total': stateCode === 'TT'},\n          {\n            'is-highlighted':\n              (stateCode && regionHighlighted?.stateCode === stateCode) ||\n              (districtName &&\n                regionHighlighted?.districtName === districtName &&\n                regionHighlighted?.stateCode === data.stateCode),\n          }\n        )}\n        onMouseEnter={highlightState}\n        onClick={_setShowDistrict}\n        ref={rowElement}\n      >\n        <div className=\"cell\">\n          <div className=\"state-name fadeInUp\">\n            {t(STATE_NAMES[stateCode]) || districtNameStr}\n          </div>\n          {data?.meta?.notes && (\n            <Tooltip message={data.meta.notes}>\n              <InfoIcon size={16} />\n            </Tooltip>\n          )}\n        </div>\n\n        {tableStatistics.map((statistic) => (\n          <Cell\n            key={statistic}\n            {...{\n              data,\n              statistic,\n              getTableStatistic,\n            }}\n          />\n        ))}\n      </div>\n\n      {showDistricts && (\n        <>\n          <div className=\"state-meta\">\n            <div className=\"state-meta-top\">\n              {data?.meta?.['last_updated'] && (\n                <p className=\"last-updated\">\n                  <ClockIcon />\n                  {capitalize(\n                    `${formatLastUpdated(data.meta.last_updated)} ${t('ago')}`\n                  )}\n                </p>\n              )}\n              <div\n                className=\"state-page\"\n                onClick={handleStatePageClick.bind(this, stateCode)}\n              >\n                <GraphIcon />\n                <span>\n                  {t('See more details on {{state}}', {\n                    state: stateCode,\n                  })}\n                </span>\n              </div>\n            </div>\n\n            {data.districts && UNKNOWN_DISTRICT_KEY in data.districts && (\n              <div className=\"state-meta-bottom\">\n                <div className={classnames('disclaimer')}>\n                  <AlertIcon />\n                  <span>\n                    {t('District-wise data not available in state bulletin')}\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className={classnames('row', 'heading')}>\n            <div\n              className=\"cell heading\"\n              onClick={handleSortClick.bind(this, 'districtName')}\n            >\n              <div className=\"district-name\">{t('District')}</div>\n              {sortData.sortColumn === 'districtName' && (\n                <div className={'sort-icon'}>\n                  {sortData.isAscending ? (\n                    <SortAscIcon size={12} />\n                  ) : (\n                    <SortDescIcon size={12} />\n                  )}\n                </div>\n              )}\n            </div>\n\n            {tableStatistics.map((statistic) => (\n              <HeaderCell\n                key={statistic}\n                {...{statistic, sortData, setSortData}}\n                handleSort={handleSortClick.bind(this, statistic)}\n              />\n            ))}\n          </div>\n        </>\n      )}\n\n      {showDistricts &&\n        Object.keys(data.districts || {})\n          .sort((a, b) => sortingFunction(a, b))\n          .map((districtName) => (\n            <DistrictRow\n              data={data.districts[districtName]}\n              key={districtName}\n              {...{\n                tableStatistics,\n                districtName,\n                regionHighlighted,\n                setRegionHighlighted,\n                stateCode,\n                expandTable,\n                getTableStatistic,\n              }}\n            />\n          ))}\n\n      {showDistricts && (\n        <div className=\"spacer-row\">\n          <div className=\"spacer\">\n            <p>{`End of ${t(STATE_NAMES[stateCode])}'s districts`}</p>\n            <div className=\"fold\" onClick={handleCollapse}>\n              <FoldUpIcon />\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (\n    (!equal(\n      prevProps.regionHighlighted.stateCode,\n      currProps.regionHighlighted.stateCode\n    ) &&\n      equal(prevProps.regionHighlighted.stateCode, prevProps.stateCode)) ||\n    equal(currProps.regionHighlighted.stateCode, currProps.stateCode)\n  ) {\n    return false;\n  } else if (\n    (!equal(\n      prevProps.regionHighlighted.districtName,\n      currProps.regionHighlighted.districtName\n    ) &&\n      equal(\n        prevProps.regionHighlighted.districtName,\n        prevProps.districtName\n      )) ||\n    equal(currProps.regionHighlighted.districtName, currProps.districtName)\n  ) {\n    return false;\n  } else if (!equal(prevProps.expandTable, currProps.expandTable)) {\n    return false;\n  } else if (!equal(prevProps.getTableStatistic, currProps.getTableStatistic)) {\n    return false;\n  } else if (!equal(prevProps.tableStatistics, currProps.tableStatistics)) {\n    return false;\n  } else return true;\n};\n\nexport default memo(Row, isEqual);\n"],"sourceRoot":""}