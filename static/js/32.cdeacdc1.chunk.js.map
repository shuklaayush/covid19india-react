{"version":3,"sources":["../node_modules/react-use/esm/useIsomorphicLayoutEffect.js","../node_modules/react-use/esm/useMeasure.js","components/MapSwitcher.js"],"names":["useIsomorphicLayoutEffect","isBrowser","useLayoutEffect","useEffect","defaultState","x","y","width","height","top","left","bottom","right","window","ResizeObserver","_a","useState","element","ref","_b","rect","setRect","observer","useMemo","entries","contentRect","top_1","observe","disconnect","noop","MapSwitcher","mapStatistic","setMapStatistic","useMeasure","mapSwitcher","clicked","setClicked","count","setCount","useSpring","opacity","background","STATISTIC_CONFIGS","color","transform","PRIMARY_STATISTICS","indexOf","config","gentle","spring","springApi","ReactDOM","unstable_batchedUpdates","start","delay","onStart","bind","onRest","handleClick","useCallback","statistic","prevCount","className","div","style","map","index","classnames","onClick","isEqual","prevProps","currProps","memo"],"mappings":"qIAGeA,EADiBC,IAAYC,kBAAkBC,YCC1DC,EAAe,CACfC,EAAG,EACHC,EAAG,EACHC,MAAO,EACPC,OAAQ,EACRC,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,MAAO,GAuBIX,SAA8C,qBAA1BY,OAAOC,eArB1C,WACI,IAAIC,EAAKC,mBAAS,MAAOC,EAAUF,EAAG,GAAIG,EAAMH,EAAG,GAC/CI,EAAKH,mBAASZ,GAAegB,EAAOD,EAAG,GAAIE,EAAUF,EAAG,GACxDG,EAAWC,mBAAQ,WACnB,OAAO,IAAIV,OAAOC,gBAAe,SAAUU,GACvC,GAAIA,EAAQ,GAAI,CACZ,IAAIT,EAAKS,EAAQ,GAAGC,YAAapB,EAAIU,EAAGV,EAAGC,EAAIS,EAAGT,EAAGC,EAAQQ,EAAGR,MAAOC,EAASO,EAAGP,OAAQkB,EAAQX,EAAGN,IAAKC,EAAOK,EAAGL,KAAMC,EAASI,EAAGJ,OAAQC,EAAQG,EAAGH,MAC1JS,EAAQ,CAAEhB,EAAGA,EAAGC,EAAGA,EAAGC,MAAOA,EAAOC,OAAQA,EAAQC,IAAKiB,EAAOhB,KAAMA,EAAMC,OAAQA,EAAQC,MAAOA,UAG5G,IASH,OARAZ,GAA0B,WACtB,GAAKiB,EAGL,OADAK,EAASK,QAAQV,GACV,WACHK,EAASM,gBAEd,CAACX,IACG,CAACC,EAAKE,IAIV,WAAc,MAAO,CAACS,IAAMzB,K,+IC5B7B0B,EAAc,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,gBAClC,EAA+BC,cAA/B,mBAAOC,EAAP,KAAqB3B,EAArB,KAAqBA,MACrB,EAA8BS,oBAAS,GAAvC,mBAAOmB,EAAP,KAAgBC,EAAhB,KACA,EAA0BpB,mBAAS,GAAnC,mBAAOqB,EAAP,KAAcC,EAAd,KACA,EAA4BC,qBAAU,iBAAO,CAC3CC,QAAS,EACTC,WAAW,GAAD,OAAKC,IAAkBX,GAAcY,MAArC,MACVC,UAAU,eAAD,OACPrC,EAAQsC,IAAmBC,QAAQf,GAAgB,IAD5C,aAGTgB,OAAQA,SAAOC,WANjB,mBAAOC,EAAP,KAAeC,EAAf,KASA/C,qBAAU,WACJI,EAAQ,GACV4C,IAASC,yBAAwB,WAC/BF,EAAUG,MAAM,CACdT,UAAU,eAAD,OACPrC,EAAQsC,IAAmBC,QAAQf,GAAgB,IAD5C,aAGTS,QAAS,EACTC,WAAW,GAAD,OAAKC,IAAkBX,GAAcY,MAArC,MACVW,MAAiB,IAAVjB,EAAc,KAAO,EAC5BkB,QAASnB,EAAWoB,KAAK,GAAM,GAC/BC,OAAQrB,EAAWoB,KAAK,GAAM,UAInC,CAACnB,EAAON,EAAcmB,EAAW3C,IAEpC,IAAMmD,EAAcC,uBAClB,SAACC,GACCtB,GAAS,SAACuB,GAAD,OAAeA,EAAY,KACpC7B,EAAgB4B,KAElB,CAAC5B,IAGH,OACE,sBAAK8B,UAAU,cAAc5C,IAAKgB,EAAlC,UACE,cAAC,WAAS6B,IAAV,CAAcD,UAAU,YAAYE,MAAOf,IAE1CJ,IAAmBoB,KAAI,SAACL,EAAWM,GAAZ,OACtB,qBAEEJ,UAAWK,IAAW,YAAD,4BAAsBP,IAAezB,IAC1DiC,QAASV,EAAYF,KAAK,EAAMI,IAF3BM,UASTG,EAAU,SAACC,EAAWC,GAC1B,OAAID,EAAUvC,eAAiBwC,EAAUxC,cAM5ByC,yBAAK1C,EAAauC","file":"static/js/32.cdeacdc1.chunk.js","sourcesContent":["import { useEffect, useLayoutEffect } from 'react';\nimport { isBrowser } from './misc/util';\nvar useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\nexport default useIsomorphicLayoutEffect;\n","import { useMemo, useState } from 'react';\nimport useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect';\nimport { isBrowser, noop } from './misc/util';\nvar defaultState = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n};\nfunction useMeasure() {\n    var _a = useState(null), element = _a[0], ref = _a[1];\n    var _b = useState(defaultState), rect = _b[0], setRect = _b[1];\n    var observer = useMemo(function () {\n        return new window.ResizeObserver(function (entries) {\n            if (entries[0]) {\n                var _a = entries[0].contentRect, x = _a.x, y = _a.y, width = _a.width, height = _a.height, top_1 = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right;\n                setRect({ x: x, y: y, width: width, height: height, top: top_1, left: left, bottom: bottom, right: right });\n            }\n        });\n    }, []);\n    useIsomorphicLayoutEffect(function () {\n        if (!element)\n            return;\n        observer.observe(element);\n        return function () {\n            observer.disconnect();\n        };\n    }, [element]);\n    return [ref, rect];\n}\nexport default isBrowser && typeof window.ResizeObserver !== 'undefined'\n    ? useMeasure\n    : (function () { return [noop, defaultState]; });\n","import {PRIMARY_STATISTICS, STATISTIC_CONFIGS} from '../constants';\n\nimport classnames from 'classnames';\nimport {memo, useState, useCallback, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport {useSpring, animated, config} from 'react-spring';\nimport {useMeasure} from 'react-use';\n\nconst MapSwitcher = ({mapStatistic, setMapStatistic}) => {\n  const [mapSwitcher, {width}] = useMeasure();\n  const [clicked, setClicked] = useState(false);\n  const [count, setCount] = useState(0);\n  const [spring, springApi] = useSpring(() => ({\n    opacity: 0,\n    background: `${STATISTIC_CONFIGS[mapStatistic].color}20`,\n    transform: `translate3d(${\n      width * PRIMARY_STATISTICS.indexOf(mapStatistic) * 0.25\n    }px, 0, 0)`,\n    config: config.gentle,\n  }));\n\n  useEffect(() => {\n    if (width > 0) {\n      ReactDOM.unstable_batchedUpdates(() => {\n        springApi.start({\n          transform: `translate3d(${\n            width * PRIMARY_STATISTICS.indexOf(mapStatistic) * 0.25\n          }px, 0, 0)`,\n          opacity: 1,\n          background: `${STATISTIC_CONFIGS[mapStatistic].color}20`,\n          delay: count === 0 ? 1500 : 0,\n          onStart: setClicked.bind(this, true),\n          onRest: setClicked.bind(this, false),\n        });\n      });\n    }\n  }, [count, mapStatistic, springApi, width]);\n\n  const handleClick = useCallback(\n    (statistic) => {\n      setCount((prevCount) => prevCount + 1);\n      setMapStatistic(statistic);\n    },\n    [setMapStatistic]\n  );\n\n  return (\n    <div className=\"MapSwitcher\" ref={mapSwitcher}>\n      <animated.div className=\"highlight\" style={spring}></animated.div>\n\n      {PRIMARY_STATISTICS.map((statistic, index) => (\n        <div\n          key={index}\n          className={classnames('clickable', {[`is-${statistic}`]: !clicked})}\n          onClick={handleClick.bind(this, statistic)}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nconst isEqual = (prevProps, currProps) => {\n  if (prevProps.mapStatistic !== currProps.mapStatistic) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(MapSwitcher, isEqual);\n"],"sourceRoot":""}