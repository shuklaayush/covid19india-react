{"version":3,"sources":["hooks/useIsVisible.js","components/Tooltip.js","components/Footer.js","components/Level.js","components/MapSwitcher.js","components/StateDropdown.js","components/StateHeader.js","components/DeltaBarGraph.js","components/StateMetaCard.js","components/StateMeta.js","components/State.js"],"names":["OPTIONS","root","rootMargin","threshold","useIsVisible","elementRef","useState","isVisible","setIsVisible","useEffect","current","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","unobserve","observe","Tooltip","data","children","isTooltipVisible","setIsTooltipVisible","transitions","useTransition","from","TOOLTIP_FADE_OUT","enter","TOOLTIP_FADE_IN","leave","config","mass","tension","friction","handleClick","useCallback","e","stopPropagation","className","style","position","onMouseEnter","bind","onMouseLeave","onClick","map","item","key","props","div","dangerouslySetInnerHTML","__html","replace","React","memo","t","useTranslation","href","target","rel","LevelItem","statistic","total","delta","spring","useSpring","SPRING_CONFIG_NUMBERS","statisticConfig","STATISTIC_CONFIGS","Fragment","capitalize","displayName","h4","interpolate","formatNumber","format","size","verticalAlign","h1","trail","useMemo","styles","PRIMARY_STATISTICS","index","push","animationDelay","classnames","getStatistic","prevProps","currProps","equal","mapStatistic","setMapStatistic","useMeasure","mapSwitcher","width","clicked","setClicked","count","setCount","opacity","background","color","transform","indexOf","gentle","set","ReactDOM","unstable_batchedUpdates","delay","onStart","onRest","prevCount","ref","StateDropdown","stateCode","showDropdown","setShowDropdown","dropdownRef","useRef","history","useHistory","useClickAway","zIndex","stateCodeItr","STATE_NAMES","Object","keys","MAP_META","filter","sort","code1","code2","localeCompare","element","hyperlink","meta","formatDate","last_updated","h2","Math","floor","tested","source","getDeltaStatistic","margin","timeseries","lookback","svgRef","wrapperRef","height","dates","date","getIndiaYesterdayISO","slice","svg","select","chartRight","chartBottom","xScale","scaleBand","domain","range","paddingInner","yScale","scaleLinear","min","max","xAxis","axisBottom","tickSize","tickFormat","transition","duration","D3_TRANSITION_DURATION","call","on","remove","selectAll","attr","i","join","append","roundedBar","bandwidth","length","textSelection","text","val","prevVal","abs","viewBox","preserveAspectRatio","forceRender","x","y","w","h","r","sign","StateMetaCard","title","formula","description","pastDates","lastDate","lastConfirmed","prevWeekDate","reverse","find","differenceInDays","parseIndiaDate","prevWeekConfirmed","diffDays","confirmedPerMillion","testPerMillion","totalConfirmedPerMillion","activePercent","recoveryPercent","deathPercent","growthRate","pow","population","round","formatLastUpdated","TimeseriesExplorer","lazy","MapExplorer","Minigraphs","useParams","toUpperCase","useSessionStorage","showAllDistricts","setShowAllDistricts","districtName","regionHighlighted","setRegionHighlighted","useSWR","API_ROOT_URL","fetcher","revalidateOnMount","refreshInterval","timeseriesResponseError","error","gridRowCount","gridColumnCount","window","innerWidth","districtCount","districts","ceil","stateMetaElement","isStateMetaVisible","once","Helmet","name","content","StateHeader","MapSwitcher","Level","fallback","minHeight","display","gridTemplateRows","a","b","districtNameA","districtNameB","districtA","districtB","handleSort","undefined","every","flexBasis","Footer"],"mappings":"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","file":"static/js/14.c1a99e75.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\n\nconst OPTIONS = {\n  root: null,\n  rootMargin: '0px 0px 0px 0px',\n  threshold: 0,\n};\n\nconst useIsVisible = (elementRef) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    if (elementRef.current) {\n      const observer = new IntersectionObserver((entries, observer) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            setIsVisible(true);\n            observer.unobserve(elementRef.current);\n          }\n        });\n      }, OPTIONS);\n      observer.observe(elementRef.current);\n    }\n  }, [elementRef]);\n\n  return isVisible;\n};\n\nexport default useIsVisible;\n","import {TOOLTIP_FADE_IN, TOOLTIP_FADE_OUT} from '../animations';\n\nimport React, {useCallback, useState} from 'react';\nimport {useTransition, animated} from 'react-spring';\n\nconst Tooltip = ({data, children}) => {\n  const [isTooltipVisible, setIsTooltipVisible] = useState(false);\n\n  const transitions = useTransition(isTooltipVisible, null, {\n    from: TOOLTIP_FADE_OUT,\n    enter: TOOLTIP_FADE_IN,\n    leave: TOOLTIP_FADE_OUT,\n    config: {\n      mass: 1,\n      tension: 210,\n      friction: 20,\n    },\n  });\n\n  const handleClick = useCallback((e) => e.stopPropagation(), []);\n\n  return (\n    <span\n      className=\"Tooltip\"\n      style={{position: 'relative'}}\n      onMouseEnter={setIsTooltipVisible.bind(this, true)}\n      onMouseLeave={setIsTooltipVisible.bind(this, false)}\n      onClick={handleClick.bind(this)}\n    >\n      {children}\n\n      {transitions.map(({item, key, props}) =>\n        item ? (\n          <animated.div key={key} style={props}>\n            <div className=\"message\">\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: data.replace(/\\n/g, '<br/>'),\n                }}\n              ></p>\n            </div>\n          </animated.div>\n        ) : (\n          <animated.div key={key}></animated.div>\n        )\n      )}\n    </span>\n  );\n};\n\nexport default Tooltip;\n","import React from 'react';\nimport {Twitter, GitHub, Database, Mail, Send} from 'react-feather';\nimport {useTranslation} from 'react-i18next';\n\nfunction Footer() {\n  const {t} = useTranslation();\n\n  return (\n    <footer>\n      <div className=\"link\">\n        <a\n          href=\"https://github.com/covid19india\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          covid19india\n        </a>\n      </div>\n\n      <h5>{t('We stand with everyone fighting on the frontlines')}</h5>\n\n      <div className=\"links\">\n        <a\n          href=\"https://github.com/covid19india/covid19india-react\"\n          className=\"github\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <GitHub />\n        </a>\n\n        <a\n          className=\"api\"\n          href=\"https://api.covid19india.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <Database />\n        </a>\n\n        <a\n          href=\"https://t.me/covid19indiaorg\"\n          className=\"telegram\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <Send />\n        </a>\n\n        <a\n          href=\"https://twitter.com/covid19indiaorg\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"twitter\"\n        >\n          <Twitter />\n        </a>\n\n        <a\n          href=\"mailto:hello@covid19india.org\"\n          className=\"mail\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <Mail />\n        </a>\n      </div>\n    </footer>\n  );\n}\n\nexport default React.memo(Footer);\n","import {\n  PRIMARY_STATISTICS,\n  STATISTIC_CONFIGS,\n  SPRING_CONFIG_NUMBERS,\n} from '../constants';\nimport {capitalize, formatNumber, getStatistic} from '../utils/commonFunctions';\n\nimport {HeartFillIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport React, {useMemo} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {animated, useSpring} from 'react-spring';\n\nfunction PureLevelItem({statistic, total, delta}) {\n  const {t} = useTranslation();\n  const spring = useSpring({\n    total: total,\n    delta: delta,\n    config: SPRING_CONFIG_NUMBERS,\n  });\n\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\n\n  return (\n    <React.Fragment>\n      <h5>{t(capitalize(statisticConfig.displayName))}</h5>\n      <animated.h4>\n        {statistic !== 'active' ? (\n          delta > 0 ? (\n            spring.delta.interpolate(\n              (delta) =>\n                `+${formatNumber(delta, statisticConfig.format, statistic)}`\n            )\n          ) : (\n            <HeartFillIcon size={9} verticalAlign={2} />\n          )\n        ) : (\n          '\\u00A0'\n        )}\n      </animated.h4>\n      <animated.h1>\n        {spring.total.interpolate((total) =>\n          formatNumber(total, statisticConfig.format, statistic)\n        )}\n      </animated.h1>\n    </React.Fragment>\n  );\n}\n\nconst LevelItem = React.memo(PureLevelItem);\n\nfunction Level({data}) {\n  const trail = useMemo(() => {\n    const styles = [];\n\n    PRIMARY_STATISTICS.map((statistic, index) => {\n      styles.push({\n        animationDelay: `${750 + index * 250}ms`,\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n\n  return (\n    <div className=\"Level\">\n      {PRIMARY_STATISTICS.map((statistic, index) => (\n        <animated.div\n          key={index}\n          className={classnames('level-item', `is-${statistic}`, 'fadeInUp')}\n          style={trail[index]}\n        >\n          <LevelItem\n            {...{statistic}}\n            total={getStatistic(data, 'total', statistic)}\n            delta={getStatistic(data, 'delta', statistic)}\n          />\n        </animated.div>\n      ))}\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (\n    !equal(\n      getStatistic(prevProps.data, 'total', 'active'),\n      getStatistic(currProps.data, 'total', 'active')\n    )\n  ) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Level, isEqual);\n","import {PRIMARY_STATISTICS, STATISTIC_CONFIGS} from '../constants';\n\nimport classnames from 'classnames';\nimport React, {useState, useCallback, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport {useSpring, animated, config} from 'react-spring';\nimport {useMeasure} from 'react-use';\n\nconst MapSwitcher = ({mapStatistic, setMapStatistic}) => {\n  const [mapSwitcher, {width}] = useMeasure();\n  const [clicked, setClicked] = useState(false);\n  const [count, setCount] = useState(0);\n  const [spring, set] = useSpring(() => ({\n    opacity: 0,\n    background: `${STATISTIC_CONFIGS[mapStatistic].color}20`,\n    transform: `translateX(${\n      width * PRIMARY_STATISTICS.indexOf(mapStatistic) * 0.25\n    }px)`,\n    config: config.gentle,\n  }));\n\n  useEffect(() => {\n    if (width > 0) {\n      ReactDOM.unstable_batchedUpdates(() => {\n        set({\n          transform: `translateX(${\n            width * PRIMARY_STATISTICS.indexOf(mapStatistic) * 0.25\n          }px)`,\n          opacity: 1,\n          background: `${STATISTIC_CONFIGS[mapStatistic].color}20`,\n          delay: count === 0 ? 1500 : 0,\n          onStart: setClicked.bind(this, true),\n          onRest: setClicked.bind(this, false),\n        });\n      });\n    }\n  }, [count, mapStatistic, set, width]);\n\n  const handleClick = useCallback(\n    (statistic) => {\n      setCount((prevCount) => prevCount + 1);\n      setMapStatistic(statistic);\n    },\n    [setMapStatistic]\n  );\n\n  return (\n    <div className=\"MapSwitcher\" ref={mapSwitcher}>\n      <animated.div className=\"highlight\" style={spring}></animated.div>\n\n      {PRIMARY_STATISTICS.map((statistic, index) => (\n        <div\n          key={index}\n          className={classnames('clickable', {[`is-${statistic}`]: !clicked})}\n          onClick={handleClick.bind(this, statistic)}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nconst isEqual = (prevProps, currProps) => {\n  if (prevProps.mapStatistic !== currProps.mapStatistic) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(MapSwitcher, isEqual);\n","import {MAP_META, STATE_NAMES} from '../constants';\n\nimport React, {useState, useCallback, useRef} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport {useTransition, animated} from 'react-spring';\nimport {useClickAway} from 'react-use';\n\nconst StateDropdown = ({stateCode, trail}) => {\n  const [showDropdown, setShowDropdown] = useState(false);\n  const dropdownRef = useRef();\n  const history = useHistory();\n  const {t} = useTranslation();\n\n  useClickAway(dropdownRef, () => {\n    setShowDropdown(false);\n  });\n\n  const transitions = useTransition(showDropdown, null, {\n    from: {\n      opacity: 0,\n      transform: 'translate3d(0, 2px, 0)',\n      zIndex: 999,\n    },\n    enter: {\n      opacity: 1,\n      transform: 'translate3d(0, 0px, 0)',\n      zIndex: 999,\n    },\n    leave: {\n      opacity: 0,\n      transform: 'translate3d(0, 2px, 0)',\n      zIndex: 999,\n    },\n    config: {\n      mass: 1,\n      tension: 210,\n      friction: 20,\n    },\n  });\n\n  const handleClick = useCallback(\n    (stateCodeItr) => {\n      setShowDropdown(false);\n      history.push(`/state/${stateCodeItr}`);\n    },\n    [history]\n  );\n\n  return (\n    <div className=\"StateDropdown\" ref={dropdownRef}>\n      <animated.h1\n        className=\"state-name fadeInUp\"\n        style={trail}\n        onClick={setShowDropdown.bind(this, !showDropdown)}\n      >\n        {t(STATE_NAMES[stateCode])}\n      </animated.h1>\n\n      {transitions.map(({item, key, props}) =>\n        item ? (\n          <animated.div className=\"dropdown\" style={props} key={key}>\n            {Object.keys(MAP_META)\n              .filter(\n                (stateCodeItr) =>\n                  stateCodeItr !== 'TT' && stateCodeItr !== stateCode\n              )\n              .sort((code1, code2) =>\n                STATE_NAMES[code1].localeCompare(STATE_NAMES[code2])\n              )\n              .map((stateCodeItr) => (\n                <h1\n                  key={stateCodeItr}\n                  className=\"item\"\n                  onClick={handleClick.bind(this, stateCodeItr)}\n                >\n                  {t(STATE_NAMES[stateCodeItr])}\n                </h1>\n              ))}\n          </animated.div>\n        ) : (\n          <animated.div key={stateCode} style={props}></animated.div>\n        )\n      )}\n\n      {showDropdown && <div className=\"backdrop\"></div>}\n    </div>\n  );\n};\n\nexport default StateDropdown;\n","import StateDropdown from './StateDropdown';\n\nimport {SPRING_CONFIG_NUMBERS} from '../constants.js';\nimport {formatDate, formatNumber, getStatistic} from '../utils/commonFunctions';\n\nimport React, {useMemo} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {animated, useSpring} from 'react-spring';\n\nfunction StateHeader({data, stateCode}) {\n  const {t} = useTranslation();\n\n  const trail = useMemo(() => {\n    const styles = [];\n\n    [0, 0, 0].map((element, index) => {\n      styles.push({\n        animationDelay: `${index * 250}ms`,\n      });\n      return null;\n    });\n\n    return styles;\n  }, []);\n\n  const spring = useSpring({\n    total: getStatistic(data, 'total', 'tested'),\n    config: SPRING_CONFIG_NUMBERS,\n  });\n\n  return (\n    <div className=\"StateHeader\">\n      <div className=\"header-left\">\n        <StateDropdown {...{stateCode}} hyperlink={false} trail={trail[0]} />\n        {data?.meta?.['last_updated'] && (\n          <h5 className=\"fadeInUp\" style={trail[1]}>\n            {`Last Updated on ${formatDate(\n              data.meta.last_updated,\n              'dd MMM, p'\n            )} IST`}\n          </h5>\n        )}\n      </div>\n\n      <div className=\"header-right fadeInUp\" style={trail[2]}>\n        <h5>{t('Tested')}</h5>\n        <animated.h2>\n          {spring.total.interpolate((total) => formatNumber(Math.floor(total)))}\n        </animated.h2>\n        {data?.meta?.tested?.['last_updated'] && (\n          <h5 className=\"timestamp\">\n            {`As of ${formatDate(data.meta.tested.last_updated, 'dd MMMM')}`}\n          </h5>\n        )}\n        {data?.meta?.tested?.source && (\n          <h5>\n            {'per '}\n            <a href={data.meta.tested.source} target=\"_noblank\">\n              source\n            </a>\n          </h5>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(StateHeader);\n","import {STATISTIC_CONFIGS, D3_TRANSITION_DURATION} from '../constants';\nimport {\n  formatDate,\n  formatNumber,\n  getIndiaYesterdayISO,\n  getStatistic,\n} from '../utils/commonFunctions';\n\nimport {min, max} from 'd3-array';\nimport {axisBottom} from 'd3-axis';\nimport {scaleBand, scaleLinear} from 'd3-scale';\nimport {select} from 'd3-selection';\n// eslint-disable-next-line\nimport {transition} from 'd3-transition';\nimport equal from 'fast-deep-equal';\nimport React, {useEffect, useRef} from 'react';\nimport {useMeasure} from 'react-use';\n\nconst getDeltaStatistic = (data, statistic) => {\n  return getStatistic(data, 'delta', statistic);\n};\n\nconst margin = {top: 50, right: 0, bottom: 50, left: 0};\n\nfunction DeltaBarGraph({timeseries, statistic, lookback}) {\n  const svgRef = useRef();\n  const [wrapperRef, {width, height}] = useMeasure();\n\n  const pastDates = Object.keys(timeseries || {}).filter(\n    (date) => date <= getIndiaYesterdayISO()\n  );\n  const dates = pastDates.slice(-lookback);\n\n  useEffect(() => {\n    if (!width) return;\n    const svg = select(svgRef.current);\n\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const r = 5;\n\n    // const formatTime = timeFormat('%e %b');\n    const xScale = scaleBand()\n      .domain(dates)\n      .range([margin.left, chartRight])\n      .paddingInner(width / 1000);\n\n    const yScale = scaleLinear()\n      .domain([\n        Math.min(\n          0,\n          min(dates, (date) => getDeltaStatistic(timeseries?.[date], statistic))\n        ),\n        Math.max(\n          1,\n          max(dates, (date) => getDeltaStatistic(timeseries?.[date], statistic))\n        ),\n      ])\n      .range([chartBottom, margin.top]);\n\n    const xAxis = axisBottom(xScale)\n      .tickSize(0)\n      .tickFormat((date) => formatDate(date, 'dd MMM'));\n\n    const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n    svg\n      .select('.x-axis')\n      .transition(t)\n      .style('transform', `translateY(${yScale(0)}px)`)\n      .call(xAxis)\n      .on('start', () => svg.select('.domain').remove())\n      .selectAll('text')\n      .attr('y', 0)\n      .attr('dy', (date, i) =>\n        getDeltaStatistic(timeseries?.[date], statistic) < 0 ? '-1em' : '1.5em'\n      )\n      .style('text-anchor', 'middle')\n      .attr('fill', STATISTIC_CONFIGS[statistic].color);\n\n    svg\n      .selectAll('.bar')\n      .data(dates)\n      .join((enter) =>\n        enter\n          .append('path')\n          .attr('class', 'bar')\n          .attr('d', (date) =>\n            roundedBar(xScale(date), yScale(0), xScale.bandwidth(), 0, r)\n          )\n      )\n      .transition(t)\n      .attr('d', (date) =>\n        roundedBar(\n          xScale(date),\n          yScale(0),\n          xScale.bandwidth(),\n          yScale(0) - yScale(getDeltaStatistic(timeseries?.[date], statistic)),\n          r\n        )\n      )\n      .attr('fill', (date, i) => {\n        return i < dates.length - 1\n          ? STATISTIC_CONFIGS[statistic].color + '90'\n          : STATISTIC_CONFIGS[statistic].color;\n      });\n\n    const textSelection = svg\n      .selectAll('.label')\n      .data(dates)\n      .join('text')\n      .attr('class', 'label')\n      .attr('x', (date) => xScale(date) + xScale.bandwidth() / 2)\n      .text((date) =>\n        formatNumber(getDeltaStatistic(timeseries?.[date], statistic))\n      );\n\n    textSelection\n      .transition(t)\n      .attr('fill', STATISTIC_CONFIGS[statistic].color)\n      .attr('y', (date) => {\n        const val = getDeltaStatistic(timeseries?.[date], statistic);\n        return yScale(val) + (val < 0 ? 15 : -6);\n      });\n\n    textSelection\n      .append('tspan')\n      .attr(\n        'dy',\n        (date) =>\n          `${\n            getDeltaStatistic(timeseries?.[date], statistic) < 0 ? 1.2 : -1.2\n          }em`\n      )\n      .attr('x', (date) => xScale(date) + xScale.bandwidth() / 2)\n      .text((date, i) => {\n        if (i === 0) return '';\n        const prevVal = getDeltaStatistic(\n          timeseries?.[dates[i - 1]],\n          statistic\n        );\n        if (!prevVal) return '';\n        const delta =\n          getDeltaStatistic(timeseries?.[date], statistic) - prevVal;\n        return `${delta > 0 ? '+' : ''}${formatNumber(\n          (100 * delta) / Math.abs(prevVal)\n        )}%`;\n      })\n      .transition(t)\n      .attr('fill', STATISTIC_CONFIGS[statistic].color + '90');\n  }, [dates, height, statistic, timeseries, width]);\n\n  return (\n    <div className=\"DeltaBarGraph\" ref={wrapperRef}>\n      <svg\n        ref={svgRef}\n        width={width}\n        height={250}\n        viewBox={`0 0 ${width} ${height}`}\n        preserveAspectRatio=\"xMidYMid meet\"\n      >\n        <g className=\"x-axis\" />\n        <g className=\"y-axis\" />\n      </svg>\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.forceRender) {\n    return false;\n  } else if (!currProps.timeseries && prevProps.timeseries) {\n    return true;\n  } else if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (!equal(prevProps.stateCode, currProps.stateCode)) {\n    return false;\n  } else if (!equal(prevProps.lookback, currProps.lookback)) {\n    return false;\n  } else if (!equal(prevProps.statistic, currProps.statistic)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(DeltaBarGraph, isEqual);\n\nfunction roundedBar(x, y, w, h, r) {\n  r = Math.sign(h) * Math.min(Math.abs(h), r);\n  const paths = [\n    `M ${x} ${y}`,\n    `v ${-h + r}`,\n    `q 0 ${-r} ${Math.abs(r)} ${-r}`,\n    `h ${w - 2 * Math.abs(r)}`,\n    `q ${Math.abs(r)} 0 ${Math.abs(r)} ${r}`,\n    `v ${h - r}`,\n    'Z',\n  ];\n  return paths.join(' ');\n}\n","import Tooltip from './Tooltip';\n\nimport {InfoIcon} from '@primer/octicons-v2-react';\nimport React from 'react';\n\nfunction StateMetaCard({\n  title,\n  statistic,\n  total,\n  formula,\n  date,\n  description,\n  className,\n}) {\n  return (\n    <div className={`meta-item ${className}`}>\n      <div className=\"meta-item-top\">\n        <h3>{title}</h3>\n        <Tooltip {...{data: formula}}>\n          <InfoIcon size={16} />\n        </Tooltip>\n      </div>\n      <h1>{statistic}</h1>\n      <h5>{date}</h5>\n      {total && <h5>{`India has ${total} CPM`}</h5>}\n      <p>{description}</p>\n    </div>\n  );\n}\n\nexport default StateMetaCard;\n","import StateMetaCard from './StateMetaCard';\n\nimport {STATE_NAMES} from '../constants';\nimport {\n  formatDate,\n  formatNumber,\n  formatLastUpdated,\n  getStatistic,\n  getIndiaYesterdayISO,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport {differenceInDays} from 'date-fns';\nimport React from 'react';\nimport {Compass} from 'react-feather';\n\nfunction StateMeta({stateCode, data, timeseries}) {\n  const pastDates = Object.keys(timeseries || {}).filter(\n    (date) => date <= getIndiaYesterdayISO()\n  );\n  const lastDate = pastDates[pastDates.length - 1];\n  const lastConfirmed = getStatistic(\n    timeseries?.[lastDate],\n    'total',\n    'confirmed'\n  );\n  const prevWeekDate = pastDates\n    .reverse()\n    .find(\n      (date) =>\n        differenceInDays(parseIndiaDate(lastDate), parseIndiaDate(date)) >= 7\n    );\n  const prevWeekConfirmed = getStatistic(\n    timeseries?.[prevWeekDate],\n    'total',\n    'confirmed'\n  );\n  const diffDays = differenceInDays(\n    parseIndiaDate(lastDate),\n    parseIndiaDate(prevWeekDate)\n  );\n\n  const confirmedPerMillion = getStatistic(\n    data[stateCode],\n    'total',\n    'confirmed',\n    true\n  );\n  const testPerMillion = getStatistic(data[stateCode], 'total', 'tested', true);\n  const totalConfirmedPerMillion = getStatistic(\n    data['TT'],\n    'total',\n    'confirmed',\n    true\n  );\n\n  const activePercent = getStatistic(data[stateCode], 'total', 'activeRatio');\n  const recoveryPercent = getStatistic(\n    data[stateCode],\n    'total',\n    'recoveryRatio'\n  );\n  const deathPercent = getStatistic(data[stateCode], 'total', 'cfr');\n\n  const growthRate =\n    (Math.pow(lastConfirmed / prevWeekConfirmed, 1 / diffDays) - 1) * 100;\n\n  return (\n    <React.Fragment>\n      <div className=\"StateMeta population\">\n        <div className=\"meta-item population\">\n          <h3>Population</h3>\n          <h1>{formatNumber(data[stateCode]?.meta?.population)}</h1>\n        </div>\n        <div className=\"alert\">\n          <Compass />\n          <div className=\"alert-right\">\n            Based on 2019 population projection by NCP{' '}\n            <a\n              href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n              target=\"_noblank\"\n            >\n              report\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"StateMeta\">\n        <StateMetaCard\n          className=\"confirmed\"\n          title={'Confirmed Per Million'}\n          statistic={formatNumber(confirmedPerMillion)}\n          total={formatNumber(totalConfirmedPerMillion)}\n          formula={'(confirmed / state population) * 1 Million'}\n          description={`\n            ~${formatNumber(\n              Math.round(confirmedPerMillion)\n            )} out of every 10 lakh people in ${\n            STATE_NAMES[stateCode]\n          } have tested positive for the virus.\n            `}\n        />\n\n        <StateMetaCard\n          className=\"active\"\n          title={'Active Ratio'}\n          statistic={`${formatNumber(activePercent, '%')}`}\n          formula={'(active / confirmed) * 100'}\n          description={\n            activePercent > 0\n              ? `For every 100 confirmed cases, ~${formatNumber(\n                  Math.round(activePercent)\n                )} are currently infected.`\n              : 'Currently, there are no active cases in this state.'\n          }\n        />\n\n        <StateMetaCard\n          className=\"recovery\"\n          title={'Recovery Ratio'}\n          statistic={`${formatNumber(recoveryPercent, '%')}`}\n          formula={'(recovered / confirmed) * 100'}\n          description={\n            recoveryPercent > 0\n              ? `For every 100 confirmed cases, ~${formatNumber(\n                  Math.round(recoveryPercent)\n                )} have recovered from the virus.`\n              : 'Unfortunately, there are no recoveries in this state yet.'\n          }\n        />\n\n        <StateMetaCard\n          className=\"mortality\"\n          title={'Case Fatality Ratio'}\n          statistic={`${formatNumber(deathPercent, '%')}`}\n          formula={'(deceased / confirmed) * 100'}\n          description={\n            deathPercent > 0\n              ? `For every 100 confirmed cases, ~${formatNumber(\n                  Math.round(deathPercent)\n                )} have unfortunately passed away from the virus.`\n              : 'Fortunately, no one has passed away from the virus in this state.'\n          }\n        />\n\n        <StateMetaCard\n          className=\"gr\"\n          title={'Avg. Growth Rate'}\n          statistic={growthRate > 0 ? `${formatNumber(growthRate, '%')}` : '-'}\n          formula={\n            '(((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100)/7'\n          }\n          date={`${formatDate(prevWeekDate, 'dd MMM')} - ${formatDate(\n            lastDate,\n            'dd MMM'\n          )}`}\n          description={\n            growthRate > 0\n              ? `In the last one week, the number of new infections has\n              grown by an average of ${formatNumber(growthRate, '%')}\n              every day.`\n              : 'There has been no growth in the number of infections in last one week.'\n          }\n        />\n\n        <StateMetaCard\n          className=\"tpm\"\n          title={'Tests Per Million'}\n          statistic={`${formatNumber(testPerMillion)}`}\n          formula={\n            '(total tests in state / total population of state) * 1 Million'\n          }\n          date={\n            testPerMillion\n              ? `As of ${formatLastUpdated(\n                  data[stateCode]?.meta?.tested?.['last_updated']\n                )} ago`\n              : ''\n          }\n          description={\n            testPerMillion > 0\n              ? `For every 10 lakh people in ${STATE_NAMES[stateCode]},\n                ~${formatNumber(\n                  Math.round(testPerMillion)\n                )} samples were tested.`\n              : 'No tests have been conducted in this state yet.'\n          }\n        />\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (prevProps.stateCode !== currProps.stateCode) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(StateMeta, isEqual);\n","import DeltaBarGraph from './DeltaBarGraph';\nimport Footer from './Footer';\nimport Level from './Level';\nimport MapSwitcher from './MapSwitcher';\nimport StateHeader from './StateHeader';\nimport StateMeta from './StateMeta';\n\nimport {API_ROOT_URL, STATE_NAMES} from '../constants';\nimport useIsVisible from '../hooks/useIsVisible';\nimport {fetcher, formatNumber, getStatistic} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport React, {\n  useMemo,\n  useState,\n  useEffect,\n  lazy,\n  Suspense,\n  useRef,\n} from 'react';\nimport {Smile} from 'react-feather';\nimport {Helmet} from 'react-helmet';\nimport {useTranslation} from 'react-i18next';\nimport {useParams} from 'react-router-dom';\nimport {useSessionStorage} from 'react-use';\nimport useSWR from 'swr';\n\nconst TimeseriesExplorer = lazy(() => import('./TimeseriesExplorer'));\nconst MapExplorer = lazy(() => import('./MapExplorer'));\nconst Minigraphs = lazy(() => import('./Minigraphs'));\n\nfunction State() {\n  const {t} = useTranslation();\n\n  const stateCode = useParams().stateCode.toUpperCase();\n\n  const [mapStatistic, setMapStatistic] = useSessionStorage(\n    'mapStatistic',\n    'active'\n  );\n  const [showAllDistricts, setShowAllDistricts] = useState(false);\n  const [regionHighlighted, setRegionHighlighted] = useState({\n    stateCode: stateCode,\n    districtName: null,\n  });\n\n  useEffect(() => {\n    if (regionHighlighted.stateCode !== stateCode) {\n      setRegionHighlighted({\n        stateCode: stateCode,\n        districtName: null,\n      });\n      setShowAllDistricts(false);\n    }\n  }, [regionHighlighted.stateCode, stateCode]);\n\n  const {data: timeseries, error: timeseriesResponseError} = useSWR(\n    `${API_ROOT_URL}/timeseries-${stateCode}.min.json`,\n    fetcher,\n    {\n      revalidateOnMount: true,\n      refreshInterval: 100000,\n    }\n  );\n\n  const {data} = useSWR(`${API_ROOT_URL}/data.min.json`, fetcher, {\n    revalidateOnMount: true,\n    refreshInterval: 100000,\n  });\n\n  const toggleShowAllDistricts = () => {\n    setShowAllDistricts(!showAllDistricts);\n  };\n\n  const handleSort = (districtNameA, districtNameB) => {\n    const districtA = data[stateCode].districts[districtNameA];\n    const districtB = data[stateCode].districts[districtNameB];\n    return (\n      getStatistic(districtB, 'total', mapStatistic) -\n      getStatistic(districtA, 'total', mapStatistic)\n    );\n  };\n\n  const gridRowCount = useMemo(() => {\n    if (!data) return;\n    const gridColumnCount = window.innerWidth >= 540 ? 3 : 2;\n    const districtCount = data[stateCode]?.districts\n      ? Object.keys(data[stateCode].districts).filter(\n          (districtName) => districtName !== 'Unknown'\n        ).length\n      : 0;\n    const gridRowCount = Math.ceil(districtCount / gridColumnCount);\n    return gridRowCount;\n  }, [data, stateCode]);\n\n  const stateMetaElement = useRef();\n  const isStateMetaVisible = useIsVisible(stateMetaElement, {once: true});\n\n  const trail = useMemo(() => {\n    const styles = [];\n\n    [0, 0, 0, 0].map((element, index) => {\n      styles.push({\n        animationDelay: `${index * 250}ms`,\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n\n  const lookback = showAllDistricts ? (window.innerWidth >= 540 ? 10 : 8) : 6;\n\n  return (\n    <React.Fragment>\n      <Helmet>\n        <title>\n          Coronavirus Outbreak in {STATE_NAMES[stateCode]} - covid19india.org\n        </title>\n        <meta\n          name=\"title\"\n          content={`Coronavirus Outbreak in ${STATE_NAMES[stateCode]}: Latest Map and Case Count`}\n        />\n      </Helmet>\n\n      <div className=\"State\">\n        <div className=\"state-left\">\n          <StateHeader data={data?.[stateCode]} stateCode={stateCode} />\n\n          <div style={{position: 'relative'}}>\n            <MapSwitcher {...{mapStatistic, setMapStatistic}} />\n            <Level data={data?.[stateCode]} />\n            <Minigraphs\n              timeseries={timeseries?.[stateCode]?.dates}\n              {...{stateCode}}\n              forceRender={!!timeseriesResponseError}\n            />\n          </div>\n\n          {data && (\n            <Suspense fallback={<div style={{minHeight: '50rem'}} />}>\n              <MapExplorer\n                {...{\n                  stateCode,\n                  data,\n                  regionHighlighted,\n                  setRegionHighlighted,\n                  mapStatistic,\n                  setMapStatistic,\n                }}\n              ></MapExplorer>\n            </Suspense>\n          )}\n\n          <span ref={stateMetaElement} />\n\n          {data && isStateMetaVisible && (\n            <StateMeta\n              {...{\n                stateCode,\n                data,\n              }}\n              timeseries={timeseries?.[stateCode]?.dates}\n            />\n          )}\n        </div>\n\n        <div className=\"state-right\">\n          <React.Fragment>\n            <div\n              className=\"district-bar\"\n              style={!showAllDistricts ? {display: 'flex'} : {}}\n            >\n              <div className=\"district-bar-top\">\n                <div className=\"district-bar-left\">\n                  <h2\n                    className={classnames(mapStatistic, 'fadeInUp')}\n                    style={trail[0]}\n                  >\n                    Top districts\n                  </h2>\n                  <div\n                    className={`districts fadeInUp ${\n                      showAllDistricts ? 'is-grid' : ''\n                    }`}\n                    style={\n                      showAllDistricts\n                        ? {\n                            gridTemplateRows: `repeat(${gridRowCount}, 2rem)`,\n                            ...trail[1],\n                          }\n                        : trail[1]\n                    }\n                  >\n                    {Object.keys(data?.[stateCode]?.districts || {})\n                      .filter((districtName) => districtName !== 'Unknown')\n                      .sort((a, b) => handleSort(a, b))\n                      .slice(0, showAllDistricts ? undefined : 5)\n                      .map((districtName) => {\n                        const total = getStatistic(\n                          data[stateCode].districts[districtName],\n                          'total',\n                          mapStatistic\n                        );\n                        const delta = getStatistic(\n                          data[stateCode].districts[districtName],\n                          'delta',\n                          mapStatistic\n                        );\n                        return (\n                          <div key={districtName} className=\"district\">\n                            <h2>{formatNumber(total)}</h2>\n                            <h5>{t(districtName)}</h5>\n                            {mapStatistic !== 'active' && (\n                              <div className=\"delta\">\n                                <h6 className={mapStatistic}>\n                                  {delta > 0\n                                    ? '\\u2191' + formatNumber(delta)\n                                    : ''}\n                                </h6>\n                              </div>\n                            )}\n                          </div>\n                        );\n                      })}\n                  </div>\n                </div>\n\n                <div className=\"district-bar-right fadeInUp\" style={trail[2]}>\n                  {timeseries &&\n                    (mapStatistic === 'confirmed' ||\n                      mapStatistic === 'deceased') && (\n                      <div className=\"happy-sign\">\n                        {Object.keys(timeseries[stateCode]?.dates || {})\n                          .slice(-lookback)\n                          .every(\n                            (date) =>\n                              getStatistic(\n                                timeseries[stateCode].dates[date],\n                                'delta',\n                                mapStatistic\n                              ) === 0\n                          ) && (\n                          <div\n                            className={`alert ${\n                              mapStatistic === 'confirmed' ? 'is-green' : ''\n                            }`}\n                          >\n                            <Smile />\n                            <div className=\"alert-right\">\n                              No new {mapStatistic} cases in the past five days\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  <DeltaBarGraph\n                    timeseries={timeseries?.[stateCode]?.dates}\n                    statistic={mapStatistic}\n                    {...{stateCode, lookback}}\n                    forceRender={!!timeseriesResponseError}\n                  />\n                </div>\n              </div>\n\n              <div className=\"district-bar-bottom\">\n                {Object.keys(data?.[stateCode]?.districts || {}).length > 5 ? (\n                  <button\n                    className=\"button fadeInUp\"\n                    onClick={toggleShowAllDistricts}\n                    style={trail[3]}\n                  >\n                    <span>{showAllDistricts ? `View less` : `View all`}</span>\n                  </button>\n                ) : (\n                  <div style={{height: '3.75rem', flexBasis: '15%'}} />\n                )}\n              </div>\n            </div>\n\n            <Suspense fallback={<div />}>\n              <TimeseriesExplorer\n                {...{\n                  stateCode,\n                  timeseries,\n                  regionHighlighted,\n                  setRegionHighlighted,\n                }}\n                forceRender={!!timeseriesResponseError}\n              />\n            </Suspense>\n          </React.Fragment>\n        </div>\n      </div>\n\n      <Footer />\n    </React.Fragment>\n  );\n}\n\nexport default React.memo(State);\n"],"sourceRoot":""}